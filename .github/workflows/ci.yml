---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CPU-only PyTorch first
          pip install --extra-index-url https://download.pytorch.org/whl/cpu torch==2.3.1+cpu
          # Install other dependencies from main PyPI
          pip install -r apps/collector/requirements.txt
          pip install pytest pytest-cov pytest-mock coverage ruff black isort

      - name: Code quality checks
        run: |
          # Linting with ruff
          ruff check apps/ tests/

          # Code formatting with black
          black --check apps/ tests/

          # Import sorting with isort
          isort --check-only apps/ tests/

      - name: Run tests
        env:
          REDDIT_CLIENT_ID: dummy_client_id
          REDDIT_CLIENT_SECRET: dummy_client_secret
          REDDIT_USER_AGENT: test_agent
          ENABLE_METRICS: true
          METRICS_PORT: 8000
        run: |
          # Run tests first to ensure they pass
          python -m pytest tests/ -v --tb=short
          
      - name: Generate coverage report
        env:
          REDDIT_CLIENT_ID: dummy_client_id
          REDDIT_CLIENT_SECRET: dummy_client_secret
          REDDIT_USER_AGENT: test_agent
          ENABLE_METRICS: true
          METRICS_PORT: 8000
        continue-on-error: true
        run: |
          # Generate coverage report with .coveragerc configuration
          echo "Generating coverage report..."
          python -m coverage run -m pytest tests/ -q
          python -m coverage report --show-missing
          python -m coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Upload security scan as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.sarif

  build-and-push:
    name: Build and Push Docker Image
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true

      - name: Generate deployment artifact
        run: |
          echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)" \
            >> deployment.env
          echo "IMAGE_REGISTRY=${{ env.REGISTRY }}" >> deployment.env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> deployment.env

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-config
          path: deployment.env

  deploy-to-server:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-config

      - name: Deploy to production server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_PATH: /home/cayir/cicd_project
        run: |
          # This is a placeholder for server deployment
          # In a real scenario, this would SSH to the server and deploy
          echo "Would deploy to $DEPLOY_HOST:$DEPLOY_PATH"
          echo "Image: $(cat deployment.env | grep IMAGE_TAG)"

          # Example deployment commands (commented out for safety):
          # eval $(ssh-agent -s)
          # echo "$DEPLOY_KEY" | ssh-add -
          # ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "
          #   cd $DEPLOY_PATH &&
          #   git pull origin main &&
          #   docker-compose down &&
          #   docker-compose pull &&
          #   docker-compose up -d
          # "
